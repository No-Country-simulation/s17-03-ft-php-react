name: Deploy CI
on:
  push:
    branches: ["frontend", "main"]
  pull_request:
    branches: ["frontend", "main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pnpm-version: [9.x]
        node-version: [20.x]
    steps:
      - name: Setup/ Checkout
        uses: actions/checkout@v4

      - name: Setup/ Install pnpm ${{ matrix.pnpm-version }}
        uses: pnpm/action-setup@v4.0.0
        with:
          version: ${{ matrix.pnpm-version }}

      - name: Setup/ Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup/ Install dependencies
        run: pnpm install

      - name: Lint/ Run ESLint
        run: pnpm lint

      - name: Test/ Unit & Integration tests
        run: pnpm test
      - name: Smoke & Acceptance tests
        run: |
          pnpm prebuild:storybook
          pnpm build:storybook --quiet
          pnpm playwright install
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:127.0.0.1:6006 && pnpm test:storybook"

  deploy:
    if: ${{ success() && github.ref == 'refs/heads/frontend' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    strategy:
      matrix:
        pnpm-version: [9.x]

    steps:
      - name: Setup/ Checkout
        uses: actions/checkout@v4

      - name: Setup/ Install pnpm ${{ matrix.pnpm-version }}
        uses: pnpm/action-setup@v4.0.0
        with:
          version: ${{ matrix.pnpm-version }}

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
