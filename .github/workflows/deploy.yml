name: CI
on:
  push:
    branches: ["frontend", "main"]
  pull_request:
    branches: ["frontend", "main"]
  workflow_dispatch:

concurrency:
  group: g-${{ github.head_ref }}
  cancel-in-progress: true

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Setup/ Checkout
        uses: actions/checkout@v4

      - name: Setup/ Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ matrix.node-version }}
          cache-dependency-path: ./frontend/pnpm-lock.yaml

      - name: Setup/ Install pnpm 9.7.0 manually
        working-directory: ./frontend
        run: npm install -g pnpm@9.7.0

      - name: Setup/ Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Lint/ Run ESLint
        working-directory: ./frontend
        run: pnpm lint

      - name: Test/ Unit & Integration tests
        working-directory: ./frontend
        run: pnpm test

  deploy:
    needs: CI
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Setup/ Checkout
        uses: actions/checkout@v4

      - name: Setup/ Install pnpm 9.7.0 manually
        working-directory: ./frontend
        run: npm install -g pnpm@9.7.0

      - name: Install Vercel CLI
        working-directory: ./frontend
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./frontend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./frontend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ./frontend
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
